@page "/profile"
@using System.Security.Claims
@using LittleFlowerKalewadi.ViewModels
@inject IProfileViewModel _profileViewModel
@inject NavigationManager _navigationManager

<EditForm class="contact-form-area mb-100" Model="_profileViewModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <section class="contact-area section-padding-200-0">
        <div class="container">
            <div class="row align-items-center justify-content-between">
                <div class="col-12 col-lg-5">
                    <div class="section-heading">
                        <h2>Profile</h2>
                        <p>Edit your profile below</p>
                    </div>
                    <div class="contact-form-area mb-100">
                        <div class="row">
                                <div class="col-12">
                                <div class="form-group">
                                    First Name
                                    <InputText @bind-Value="_profileViewModel.FirstName" class="form-control"/>
                                    <ValidationMessage For="@(() => _profileViewModel.FirstName)" />
                                </div>                        
                            </div>
                            <div class="col-12">
                                <div class="form-group">
                                    Last Name
                                    <InputText @bind-Value="_profileViewModel.LastName" class="form-control"/>
                                    <ValidationMessage For="@(() => _profileViewModel.LastName)" />
                                </div>                        
                            </div>
                            <div class="col-12">
                                <div class="form-group">
                                    Date of birth
                                    <InputDate @bind-Value="_profileViewModel.DateOfBirth" class="form-control"/>
                                    <ValidationMessage For="@(() => _profileViewModel.DateOfBirth)" />
                                </div>                        
                            </div>
                            <div class="col-12">
                                <div class="form-group">
                                    Email Address
                                    <InputText @bind-Value="_profileViewModel.EmailAddress" class="form-control"/>
                                    <ValidationMessage For="@(() => _profileViewModel.EmailAddress)" />
                                </div>                        
                            </div>
                            <br />
                            <div class="col-12">
                                <button class="btn alazea-btn mt-15" type="submit">Update Profile</button>
                            </div>
                            @* <br />
                            <div class="col-6">
                                <input type="password" @bind="_profileViewModel.Password" class="form-control">
                            </div>
                            <br />
                            <div class="col-12">
                                <button class="btn btn-danger" @onclick="_profileViewModel.ChangePassword">Change Password</button>
                            </div> *@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</EditForm>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    protected override async Task OnInitializedAsync() 
    {
        var authState = await authenticationState;//_authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if(user.Identity.IsAuthenticated)
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            _profileViewModel.UserId = Convert.ToInt32(claim?.Value) ;
            await _profileViewModel.GetProfile();
        }
        else
        {
            _navigationManager.NavigateTo("/");
        }
        
    }

    public async Task HandleValidSubmit()
    {
        await _profileViewModel.UpdateProfile();
        _navigationManager.NavigateTo("/profile",true);
    }

}